package edu.ncsu.lubick.unitTests;

import static org.hamcrest.CoreMatchers.*;
import static org.junit.Assert.*;

import java.net.URL;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;

import org.apache.log4j.BasicConfigurator;
import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import edu.ncsu.lubick.Runner;
import edu.ncsu.lubick.localHub.LocalHub;
import edu.ncsu.lubick.localHub.ToolStream;
import edu.ncsu.lubick.localHub.database.RemoteSQLDatabaseFactory;
import edu.ncsu.lubick.localHub.forTesting.IdealizedToolStream;
import edu.ncsu.lubick.localHub.forTesting.IdealizedToolStream.IdealizedToolUsage;
import edu.ncsu.lubick.localHub.forTesting.TestingUtils;

public class TestToolStream {

	
	@BeforeClass
	public static void setUpBeforeAll()
	{
		RemoteSQLDatabaseFactory.setUpToUseMockDB(true);
		try
		{
			URL url = Runner.class.getResource(LocalHub.LOGGING_FILE_PATH);
			PropertyConfigurator.configure(url);
			Logger.getRootLogger().info("Logging initialized");
		}
		catch (Exception e)
		{
			//load safe defaults
			BasicConfigurator.configure();
			Logger.getRootLogger().info("Could not load property file, loading defaults", e);
		}
	}

	@Before
	public void setUp() throws Exception
	{
	}

	@Test
	public void testManualCreationOfToolStream()
	{

		Date firstDate = TestingUtils.truncateTimeToMinute(new Date());

		IdealizedToolStream iToolStream = new IdealizedToolStream(firstDate);

		Date secondDate = new Date(firstDate.getTime() + 1000);

		iToolStream.addToolUsage("ToolString", "ClassString", "Keypresses", firstDate, 2);
		iToolStream.addToolUsage("WhomboTool #5", "Debug", "Ctrl+5", secondDate, 1);

		// I'm scoping this out to avoid copy+paste problems with these
		// assertions
		{
			List<IdealizedToolStream.IdealizedToolUsage> tools = iToolStream.getAsList();

			assertEquals("ToolString", tools.get(0).getToolName());
			assertEquals("ClassString", tools.get(0).getToolClass());
			assertEquals("Keypresses", tools.get(0).getToolKeyPresses());
			assertEquals(firstDate, tools.get(0).getTimeStamp());
			assertEquals(2, tools.get(0).getDuration());

			assertEquals("WhomboTool #5", tools.get(1).getToolName());
			assertEquals("Debug", tools.get(1).getToolClass());
			assertEquals("Ctrl+5", tools.get(1).getToolKeyPresses());
			assertEquals(secondDate, tools.get(1).getTimeStamp());
			assertEquals(1, tools.get(1).getDuration());
		}

		ToolStream convertedToolStream = ToolStream.generateFromJSON(iToolStream.toJSON());

		assertTrue(iToolStream.isEquivalent(convertedToolStream));

		{
			List<ToolStream.ToolUsage> tools = convertedToolStream.getAsList();

			assertEquals("ToolString", tools.get(0).getToolName());
			assertEquals("ClassString", tools.get(0).getToolClass());
			assertEquals("Keypresses", tools.get(0).getToolKeyPresses());
			assertEquals(firstDate, tools.get(0).getTimeStamp());
			assertEquals(2, tools.get(0).getDuration());

			assertEquals("WhomboTool #5", tools.get(1).getToolName());
			assertEquals("Debug", tools.get(1).getToolClass());
			assertEquals("Ctrl+5", tools.get(1).getToolKeyPresses());
			assertEquals(secondDate, tools.get(1).getTimeStamp());
			assertEquals(1, tools.get(1).getDuration());
		}

	}

	@Test
	public void testAutomaticallyCreatedToolStreams() throws Exception
	{
		IdealizedToolStream iToolStream = IdealizedToolStream.generateRandomToolStream(10);
		List<IdealizedToolUsage> iTools = iToolStream.getAsList();

		assertEquals(10, iTools.size());
		assertEquals(10, iToolStream.numberOfToolUses());

		GregorianCalendar gc = new GregorianCalendar();

		// I want the autogenerated tool to have every tool's timestamp be
		// within the same minute,
		// but, all of the seconds should not be the same. As long as one of
		// them is different,
		// that will be a valid test
		int firstSeconds = -1;
		boolean areAllSecondsTheSameHuh = true;
		int allMinutes = -1;

		for (IdealizedToolUsage tu : iTools)
		{
			assertNotNull(tu.getTimeStamp());
			assertNotNull(tu.getToolClass());
			assertNotNull(tu.getToolKeyPresses());
			assertNotNull(tu.getToolName());
			assertThat(tu.getDuration(), not(equalTo(0)));

			// Tests to make sure that the
			gc.setTime(tu.getTimeStamp());

			if (firstSeconds == -1)
			{
				firstSeconds = gc.get(GregorianCalendar.SECOND);
			}
			else
			{
				areAllSecondsTheSameHuh = areAllSecondsTheSameHuh && firstSeconds == gc.get(GregorianCalendar.SECOND);
			}

			if (allMinutes == -1)
			{
				allMinutes = gc.get(GregorianCalendar.MINUTE);
			}
			else
			{
				assertEquals(allMinutes, gc.get(GregorianCalendar.MINUTE));
			}

		}

		assertFalse(areAllSecondsTheSameHuh);

		ToolStream convertedToolStream = ToolStream.generateFromJSON(iToolStream.toJSON());

		List<edu.ncsu.lubick.localHub.ToolStream.ToolUsage> theRealTools = convertedToolStream.getAsList();

		assertEquals(iTools.size(), theRealTools.size());
		assertEquals(iToolStream.numberOfToolUses(), theRealTools.size());

		assertTrue(iToolStream.isEquivalent(convertedToolStream));
	}
}
